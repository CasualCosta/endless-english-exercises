{"ast":null,"code":"const maleNames = [\"Adam\", \"Ashton\", \"Dave\", \"John\", \"Tom\", \"Henry\", \"Mark\", \"Matthew\", \"William\", \"Robert\", \"Carl\", \"Wesley\"];\nconst femaleNames = [\"Mary\", \"Susan\", \"Katherine\", \"Olivia\", \"Pamela\", \"Beatrice\", \"Sandra\", \"Diana\", \"Phoebe\", \"Anna\", \"Christine\", \"Lisa\", \"Vanessa\"];\nexport const getPerson = isMale => {\n  const type = isMale ? 'male' : 'female';\n  const firstName = isMale ? maleNames[Math.floor(Math.random() * maleNames.length)] : femaleNames[Math.floor(Math.random() * femaleNames.length)];\n  const subjectivePronoun = isMale ? 'he' : 'she';\n  const objectivePronoun = isMale ? 'him' : 'her';\n  const possessiveAdjective = isMale ? 'his' : 'her';\n  const possessivePronoun = isMale ? 'his' : 'hers';\n  const reflexivePronoun = isMale ? 'himself' : 'herself';\n  return {\n    type,\n    firstName,\n    subjectivePronoun,\n    objectivePronoun,\n    possessiveAdjective,\n    possessivePronoun,\n    reflexivePronoun\n  };\n};\nexport const GetPeople = () => {};\n_c = GetPeople;\nvar _c;\n$RefreshReg$(_c, \"GetPeople\");","map":{"version":3,"names":["maleNames","femaleNames","getPerson","isMale","type","firstName","Math","floor","random","length","subjectivePronoun","objectivePronoun","possessiveAdjective","possessivePronoun","reflexivePronoun","GetPeople","_c","$RefreshReg$"],"sources":["C:/Users/felip/OneDrive/Documentos/Programação/endless-english-exercises/src/database/peopleData.js"],"sourcesContent":["const maleNames = [\r\n    \"Adam\",\r\n    \"Ashton\",\r\n    \"Dave\",\r\n    \"John\",\r\n    \"Tom\",\r\n    \"Henry\",\r\n    \"Mark\",\r\n    \"Matthew\",\r\n    \"William\",\r\n    \"Robert\",\r\n    \"Carl\",\r\n    \"Wesley\"\r\n]\r\n\r\nconst femaleNames = [\r\n    \"Mary\",\r\n    \"Susan\",\r\n    \"Katherine\",\r\n    \"Olivia\",\r\n    \"Pamela\",\r\n    \"Beatrice\",\r\n    \"Sandra\",\r\n    \"Diana\",\r\n    \"Phoebe\",\r\n    \"Anna\",\r\n    \"Christine\",\r\n    \"Lisa\",\r\n    \"Vanessa\"\r\n]\r\n\r\nexport const getPerson = (isMale) => {\r\n    const type = isMale ? 'male' : 'female';\r\n    const firstName = isMale ? \r\n    maleNames[Math.floor(Math.random() * maleNames.length)] : \r\n    femaleNames[Math.floor(Math.random() * femaleNames.length)]; \r\n    const subjectivePronoun = isMale ? 'he' : 'she';\r\n    const objectivePronoun = isMale ? 'him' : 'her';\r\n    const possessiveAdjective = isMale ? 'his' : 'her';\r\n    const possessivePronoun = isMale ? 'his' : 'hers';\r\n    const reflexivePronoun = isMale ? 'himself' : 'herself';\r\n    return {type, firstName, subjectivePronoun, objectivePronoun, possessiveAdjective,\r\n    possessivePronoun, reflexivePronoun}\r\n}\r\n\r\nexport const GetPeople = () => {\r\n    \r\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CACd,MAAM,EACN,QAAQ,EACR,MAAM,EACN,MAAM,EACN,KAAK,EACL,OAAO,EACP,MAAM,EACN,SAAS,EACT,SAAS,EACT,QAAQ,EACR,MAAM,EACN,QAAQ,CACX;AAED,MAAMC,WAAW,GAAG,CAChB,MAAM,EACN,OAAO,EACP,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,MAAM,EACN,WAAW,EACX,MAAM,EACN,SAAS,CACZ;AAED,OAAO,MAAMC,SAAS,GAAIC,MAAM,IAAK;EACjC,MAAMC,IAAI,GAAGD,MAAM,GAAG,MAAM,GAAG,QAAQ;EACvC,MAAME,SAAS,GAAGF,MAAM,GACxBH,SAAS,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGR,SAAS,CAACS,MAAM,CAAC,CAAC,GACvDR,WAAW,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGP,WAAW,CAACQ,MAAM,CAAC,CAAC;EAC3D,MAAMC,iBAAiB,GAAGP,MAAM,GAAG,IAAI,GAAG,KAAK;EAC/C,MAAMQ,gBAAgB,GAAGR,MAAM,GAAG,KAAK,GAAG,KAAK;EAC/C,MAAMS,mBAAmB,GAAGT,MAAM,GAAG,KAAK,GAAG,KAAK;EAClD,MAAMU,iBAAiB,GAAGV,MAAM,GAAG,KAAK,GAAG,MAAM;EACjD,MAAMW,gBAAgB,GAAGX,MAAM,GAAG,SAAS,GAAG,SAAS;EACvD,OAAO;IAACC,IAAI;IAAEC,SAAS;IAAEK,iBAAiB;IAAEC,gBAAgB;IAAEC,mBAAmB;IACjFC,iBAAiB;IAAEC;EAAgB,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM,CAE/B,CAAC;AAAAC,EAAA,GAFYD,SAAS;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}