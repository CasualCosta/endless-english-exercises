{"ast":null,"code":"import cities from \"../../database/cityData\";\nimport { getPerson, getPeople } from \"../../database/peopleData\";\nimport { capitalizeFirstLetter } from \"../../utils\";\nconst getQuestion = () => {\n  const isMale = Math.floor(Math.random() * 2) === 0;\n  const isPlural = Math.floor(Math.random() * 2) === 0;\n  const isAffirmative = Math.floor(Math.random() * 2) === 0;\n  let subject;\n  if (isPlural) subject = getPeople();else subject = getPerson(isMale);\n  const city = cities[Math.floor(Math.random() * cities.length)];\n  const prompt = capitalizeFirstLetter(`${isPlural ? \"are\" : \"is\"} ${subject.firstName} from ${city}? ${isAffirmative ? '(Affirmative)' : '(Negative)'}`);\n  const answer = `${isAffirmative ? \"Yes\" : \"No\"}, ${subject.subjectivePronoun} ${isPlural ? 'are' : 'is'}${isAffirmative ? '' : \"n't\"}.`;\n  return {\n    prompt,\n    answer\n  };\n};\nexport default getQuestion;","map":{"version":3,"names":["cities","getPerson","getPeople","capitalizeFirstLetter","getQuestion","isMale","Math","floor","random","isPlural","isAffirmative","subject","city","length","prompt","firstName","answer","subjectivePronoun"],"sources":["C:/Users/felip/OneDrive/Documentos/Programação/endless-english-exercises/src/activities/002_cities/citiesShortAnswer.js"],"sourcesContent":["import cities from \"../../database/cityData\";\r\nimport { getPerson, getPeople } from \"../../database/peopleData\";\r\nimport { capitalizeFirstLetter } from \"../../utils\";\r\n\r\nconst getQuestion = () => {\r\n    const isMale = Math.floor(Math.random() * 2) === 0\r\n    const isPlural = Math.floor(Math.random() * 2) === 0\r\n    const isAffirmative = Math.floor(Math.random() * 2) === 0\r\n    let subject;\r\n    if(isPlural)\r\n        subject = getPeople();\r\n    else\r\n        subject = getPerson(isMale);\r\n    const city = cities[Math.floor(Math.random() * cities.length)];\r\n    const prompt = capitalizeFirstLetter(`${isPlural ? \"are\" : \"is\"} ${subject.firstName} from ${city}? ${isAffirmative ? '(Affirmative)' : '(Negative)'}`)\r\n    const answer = `${isAffirmative ? \"Yes\" : \"No\"}, ${subject.subjectivePronoun} ${isPlural ? 'are' : 'is'}${isAffirmative ? '' : \"n't\"}.`\r\n    return {prompt, answer}\r\n}\r\n\r\nexport default getQuestion;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,SAASC,SAAS,EAAEC,SAAS,QAAQ,2BAA2B;AAChE,SAASC,qBAAqB,QAAQ,aAAa;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACtB,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;EAClD,MAAMC,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;EACpD,MAAME,aAAa,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;EACzD,IAAIG,OAAO;EACX,IAAGF,QAAQ,EACPE,OAAO,GAAGT,SAAS,EAAE,CAAC,KAEtBS,OAAO,GAAGV,SAAS,CAACI,MAAM,CAAC;EAC/B,MAAMO,IAAI,GAAGZ,MAAM,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGR,MAAM,CAACa,MAAM,CAAC,CAAC;EAC9D,MAAMC,MAAM,GAAGX,qBAAqB,CAAE,GAAEM,QAAQ,GAAG,KAAK,GAAG,IAAK,IAAGE,OAAO,CAACI,SAAU,SAAQH,IAAK,KAAIF,aAAa,GAAG,eAAe,GAAG,YAAa,EAAC,CAAC;EACvJ,MAAMM,MAAM,GAAI,GAAEN,aAAa,GAAG,KAAK,GAAG,IAAK,KAAIC,OAAO,CAACM,iBAAkB,IAAGR,QAAQ,GAAG,KAAK,GAAG,IAAK,GAAEC,aAAa,GAAG,EAAE,GAAG,KAAM,GAAE;EACvI,OAAO;IAACI,MAAM;IAAEE;EAAM,CAAC;AAC3B,CAAC;AAED,eAAeZ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}