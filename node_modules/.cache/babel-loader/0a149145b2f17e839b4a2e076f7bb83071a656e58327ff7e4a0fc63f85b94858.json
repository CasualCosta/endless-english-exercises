{"ast":null,"code":"var maleNames=[\"Adam\",\"Ashton\",\"Dave\",\"John\",\"Tom\",\"Henry\",\"Mark\",\"Matthew\",\"William\",\"Robert\",\"Carl\",\"Wesley\"];var femaleNames=[\"Mary\",\"Susan\",\"Katherine\",\"Olivia\",\"Pamela\",\"Beatrice\",\"Sandra\",\"Diana\",\"Phoebe\",\"Anna\",\"Christine\",\"Lisa\",\"Vanessa\"];export var getPerson=function getPerson(isMale){var type=isMale?'male':'female';var firstName=isMale?maleNames[Math.floor(Math.random()*maleNames.length)]:femaleNames[Math.floor(Math.random()*femaleNames.length)];var subjectivePronoun=isMale?'he':'she';var objectivePronoun=isMale?'him':'her';var possessiveAdjective=isMale?'his':'her';var possessivePronoun=isMale?'his':'hers';var reflexivePronoun=isMale?'himself':'herself';return{type:type,firstName:firstName,subjectivePronoun:subjectivePronoun,objectivePronoun:objectivePronoun,possessiveAdjective:possessiveAdjective,possessivePronoun:possessivePronoun,reflexivePronoun:reflexivePronoun};};export var getPeople=function getPeople(){var people=[];people.push(getPerson(Math.floor(Math.random()*2)));people.push(getPerson(Math.floor(Math.random()*2)));var type='plural';var firstName=\"\".concat(people[0].firstName,\" and \").concat(people[1].firstName);var subjectivePronoun='they';var objectivePronoun='them';var possessiveAdjective='their';var possessivePronoun='theirs';var reflexivePronoun='themselves';return{type:type,firstName:firstName,subjectivePronoun:subjectivePronoun,objectivePronoun:objectivePronoun,possessiveAdjective:possessiveAdjective,possessivePronoun:possessivePronoun,reflexivePronoun:reflexivePronoun};};","map":{"version":3,"names":["maleNames","femaleNames","getPerson","isMale","type","firstName","Math","floor","random","length","subjectivePronoun","objectivePronoun","possessiveAdjective","possessivePronoun","reflexivePronoun","getPeople","people","push","concat"],"sources":["C:/Users/felip/OneDrive/Documentos/Programação/endless-english-exercises/src/database/peopleData.js"],"sourcesContent":["const maleNames = [\r\n    \"Adam\",\r\n    \"Ashton\",\r\n    \"Dave\",\r\n    \"John\",\r\n    \"Tom\",\r\n    \"Henry\",\r\n    \"Mark\",\r\n    \"Matthew\",\r\n    \"William\",\r\n    \"Robert\",\r\n    \"Carl\",\r\n    \"Wesley\"\r\n]\r\n\r\nconst femaleNames = [\r\n    \"Mary\",\r\n    \"Susan\",\r\n    \"Katherine\",\r\n    \"Olivia\",\r\n    \"Pamela\",\r\n    \"Beatrice\",\r\n    \"Sandra\",\r\n    \"Diana\",\r\n    \"Phoebe\",\r\n    \"Anna\",\r\n    \"Christine\",\r\n    \"Lisa\",\r\n    \"Vanessa\"\r\n]\r\n\r\nexport const getPerson = (isMale) => {\r\n    const type = isMale ? 'male' : 'female';\r\n    const firstName = isMale ? \r\n    maleNames[Math.floor(Math.random() * maleNames.length)] : \r\n    femaleNames[Math.floor(Math.random() * femaleNames.length)]; \r\n    const subjectivePronoun = isMale ? 'he' : 'she';\r\n    const objectivePronoun = isMale ? 'him' : 'her';\r\n    const possessiveAdjective = isMale ? 'his' : 'her';\r\n    const possessivePronoun = isMale ? 'his' : 'hers';\r\n    const reflexivePronoun = isMale ? 'himself' : 'herself';\r\n    return {type, firstName, subjectivePronoun, objectivePronoun, possessiveAdjective,\r\n    possessivePronoun, reflexivePronoun}\r\n}\r\n\r\nexport const getPeople = () => {\r\n    const people = []\r\n    people.push(getPerson(Math.floor(Math.random() * 2)))\r\n    people.push(getPerson(Math.floor(Math.random() * 2)))\r\n    const type = 'plural';\r\n    const firstName = `${people[0].firstName} and ${people[1].firstName}`\r\n    const subjectivePronoun = 'they';\r\n    const objectivePronoun = 'them';\r\n    const possessiveAdjective = 'their';\r\n    const possessivePronoun = 'theirs';\r\n    const reflexivePronoun = 'themselves';\r\n    return {type, firstName, subjectivePronoun, objectivePronoun, possessiveAdjective,\r\n        possessivePronoun, reflexivePronoun}\r\n}"],"mappings":"AAAA,GAAM,CAAAA,SAAS,CAAG,CACd,MAAM,CACN,QAAQ,CACR,MAAM,CACN,MAAM,CACN,KAAK,CACL,OAAO,CACP,MAAM,CACN,SAAS,CACT,SAAS,CACT,QAAQ,CACR,MAAM,CACN,QAAQ,CACX,CAED,GAAM,CAAAC,WAAW,CAAG,CAChB,MAAM,CACN,OAAO,CACP,WAAW,CACX,QAAQ,CACR,QAAQ,CACR,UAAU,CACV,QAAQ,CACR,OAAO,CACP,QAAQ,CACR,MAAM,CACN,WAAW,CACX,MAAM,CACN,SAAS,CACZ,CAED,MAAO,IAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,MAAM,CAAK,CACjC,GAAM,CAAAC,IAAI,CAAGD,MAAM,CAAG,MAAM,CAAG,QAAQ,CACvC,GAAM,CAAAE,SAAS,CAAGF,MAAM,CACxBH,SAAS,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAGR,SAAS,CAACS,MAAM,CAAC,CAAC,CACvDR,WAAW,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAGP,WAAW,CAACQ,MAAM,CAAC,CAAC,CAC3D,GAAM,CAAAC,iBAAiB,CAAGP,MAAM,CAAG,IAAI,CAAG,KAAK,CAC/C,GAAM,CAAAQ,gBAAgB,CAAGR,MAAM,CAAG,KAAK,CAAG,KAAK,CAC/C,GAAM,CAAAS,mBAAmB,CAAGT,MAAM,CAAG,KAAK,CAAG,KAAK,CAClD,GAAM,CAAAU,iBAAiB,CAAGV,MAAM,CAAG,KAAK,CAAG,MAAM,CACjD,GAAM,CAAAW,gBAAgB,CAAGX,MAAM,CAAG,SAAS,CAAG,SAAS,CACvD,MAAO,CAACC,IAAI,CAAJA,IAAI,CAAEC,SAAS,CAATA,SAAS,CAAEK,iBAAiB,CAAjBA,iBAAiB,CAAEC,gBAAgB,CAAhBA,gBAAgB,CAAEC,mBAAmB,CAAnBA,mBAAmB,CACjFC,iBAAiB,CAAjBA,iBAAiB,CAAEC,gBAAgB,CAAhBA,gBAAgB,CAAC,CACxC,CAAC,CAED,MAAO,IAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,CAAS,CAC3B,GAAM,CAAAC,MAAM,CAAG,EAAE,CACjBA,MAAM,CAACC,IAAI,CAACf,SAAS,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAG,CAAC,CAAC,CAAC,CAAC,CACrDQ,MAAM,CAACC,IAAI,CAACf,SAAS,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAG,CAAC,CAAC,CAAC,CAAC,CACrD,GAAM,CAAAJ,IAAI,CAAG,QAAQ,CACrB,GAAM,CAAAC,SAAS,IAAAa,MAAA,CAAMF,MAAM,CAAC,CAAC,CAAC,CAACX,SAAS,UAAAa,MAAA,CAAQF,MAAM,CAAC,CAAC,CAAC,CAACX,SAAS,CAAE,CACrE,GAAM,CAAAK,iBAAiB,CAAG,MAAM,CAChC,GAAM,CAAAC,gBAAgB,CAAG,MAAM,CAC/B,GAAM,CAAAC,mBAAmB,CAAG,OAAO,CACnC,GAAM,CAAAC,iBAAiB,CAAG,QAAQ,CAClC,GAAM,CAAAC,gBAAgB,CAAG,YAAY,CACrC,MAAO,CAACV,IAAI,CAAJA,IAAI,CAAEC,SAAS,CAATA,SAAS,CAAEK,iBAAiB,CAAjBA,iBAAiB,CAAEC,gBAAgB,CAAhBA,gBAAgB,CAAEC,mBAAmB,CAAnBA,mBAAmB,CAC7EC,iBAAiB,CAAjBA,iBAAiB,CAAEC,gBAAgB,CAAhBA,gBAAgB,CAAC,CAC5C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}